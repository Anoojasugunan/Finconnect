
DECLARE open NAMESPACE 'http://www.openuri.org/';
DECLARE soapenv NAMESPACE 'http://schemas.xmlsoap.org/soap/envelope/';

CREATE COMPUTE MODULE CF_PostCharge_Initiator_ConstructPostChargeAddRq
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		SET OutputLocalEnvironment = InputLocalEnvironment;
		
		SET Environment.Variables.Recovery.Skip = 'Y' ;
		
		DECLARE envRef,envAuditRef REFERENCE TO Environment.Variables;
		DECLARE header REFERENCE TO envRef.XMLNSC.ServiceData.SourceData.XMLNSC.ns:eAI_MESSAGE.ns:eAI_HEADER;
	
		DECLARE refPostCharge  REFERENCE TO envRef.XMLNSC.ServiceData.SourceData.XMLNSC.ns:eAI_MESSAGE.ns:eAI_BODY.ns:eAI_REQUEST.ns:*;				
		MOVE envAuditRef TO  envRef.XMLNSC.ServiceData.AuditEntries;
		
		DECLARE outRef, outRootRef, refIFX REFERENCE TO OutputRoot;
		
		IF NOT EXISTS(refPostCharge.ns:chargeCode[]) THEN
			SET OutputLocalEnvironment.Variables.CHARGEDETAILS[] = PASSTHRU('SELECT * FROM CHARGES WHERE CODETYPE = ?  AND SUBTYPE = ? ORDER BY CODE,SUBTYPE ASC ', '50', OutputLocalEnvironment.Variables.CustomerInfo[1].class_code);
		
			IF NOT EXISTS(OutputLocalEnvironment.Variables.CHARGEDETAILS[]) THEN
				THROW USER EXCEPTION CATALOG 'ESB' MESSAGE 7515 VALUES('Charge code is not mapped with the requested account number-' || refPostCharge.ns:debitAccount.ns:acctId);
			END IF;
			SET OutputLocalEnvironment.Variables.ChargeCode = OutputLocalEnvironment.Variables.CHARGEDETAILS[1].ACCOUNTGL;
		ELSE
			SET OutputLocalEnvironment.Variables.ChargeCode = refPostCharge.ns:chargeCode ;
		END IF;				
		
		DECLARE clientChannel CHARACTER header.ns:clientChannel;
		
	    SET  OutputLocalEnvironment.Variables.Cache 		 = NULL;
		SET OutputLocalEnvironment.Variables.Cache.Values[1] = clientChannel;
		DECLARE refValues REFERENCE TO OutputLocalEnvironment.Variables.Cache;
		CALL CommonServicesLib.CACHE(clientChannel,'CHANNELSERVICEID','select * from CHANNELSERVICEID where CHANNEL = ?', refValues, envRef);

		IF EXISTS(envRef.CHANNELSERVICEID.{clientChannel}[])THEN				
			IF envRef.Data.RunningMode[1].Mode  ='D' THEN
				SET envRef.CHANSERVICEID = envRef.CHANNELSERVICEID.{clientChannel}.SIDDAY;
			ELSE
				SET envRef.CHANSERVICEID = envRef.CHANNELSERVICEID.{clientChannel}.SIDNIGHT;					
			END IF;							
		END IF;	
		
		IF envRef.CHANSERVICEID IS NULL THEN
			SET envRef.CHANSERVICEID	= 200 ;					
		END IF;	
		
	  	SET envRef.CHANNELSERVICEID = NULL;
	  			
		--SET OutputLocalEnvironment.Variables.CHANNELSERVICE[] =  envRef.CHANSERVICEID;
		SET OutputLocalEnvironment.Variables.CHANNELSERVICE =  envRef.CHANSERVICEID;
				
		IF OutputLocalEnvironment.Variables.CHANSERVICEID IS NULL THEN
			SET OutputLocalEnvironment.Variables.CHANSERVICEID = 800 ;					
		END IF;	
		
		CREATE LASTCHILD OF outRootRef AS outRef	DOMAIN 'XMLNSC';
	  	CREATE LASTCHILD OF outRef 	   AS outRef NAME 'IFX';
	  				
		SET outRef.SignonRq.ClientDt  = refPostCharge.ns:requestTime ;
		SET outRef.SignonRq.ClientApp = header.ns:clientChannel ;
		SET outRef.SignonRq.RqUID 	 = refPostCharge.ns:referenceNum ;

		SET outRef.BankSvcRq.RqUID 					= refPostCharge.ns:referenceNum ;
		SET outRef.BankSvcRq.PostChargeAddRq.RqUID 	= refPostCharge.ns:referenceNum ;
		
		MOVE refIFX TO outRef.BankSvcRq.PostChargeAddRq ;

		SET refIFX."ws.its_ServiceId" = OutputLocalEnvironment.Variables.CHANSERVICEID ;
		
		SET refIFX.ApplType 	= OutputLocalEnvironment.Variables.CustomerInfo[1].appl_type ;
		SET refIFX.AcctType 	= COALESCE(refPostCharge.ns:debitAccount.ns:acctType, OutputLocalEnvironment.Variables.CustomerInfo[1].acct_type) ;
		SET refIFX.AcctId 		= refPostCharge.ns:debitAccount.ns:acctId ;
		SET refIFX.CurCode 		= refPostCharge.ns:debitAccount.ns:currencyCode ;
		SET refIFX.BkEndChargeCode 	= OutputLocalEnvironment.Variables.ChargeCode ;
		SET refIFX.Amt 			   	= refPostCharge.ns:debitAccount.ns:amount ;
		SET refIFX.DepLoan 			= 'DP' ;
		SET refIFX."ws.its_FeeDesc" = refPostCharge.ns:purpose ;
		SET refIFX.RefInfo.RefId 	= refPostCharge.ns:referenceNum ;
		
		-- Build IFX Request
		DECLARE blobMsg BLOB ASBITSTREAM(OutputRoot.*[<1],1208 );
		DECLARE blobMsgChar CHAR CAST(blobMsg AS CHAR CCSID 1208);
		DELETE FIELD OutputRoot.XMLNSC;
		CREATE LASTCHILD OF OutputRoot AS outRootRef DOMAIN 'XMLNSC';
		CREATE FIELD outRootRef.soapenv:Envelope.soapenv:Body AS outRootRef;
 		SET outRootRef.open:adaptorService.(XMLNSC.CDataField)open:ifxMessage	 = blobMsgChar;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
