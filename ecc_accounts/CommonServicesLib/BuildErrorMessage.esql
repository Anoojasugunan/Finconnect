BROKER SCHEMA CommonServicesLib

CREATE COMPUTE MODULE BuildErrorMessage
	DECLARE sendEmail EXTERNAL BOOLEAN true;
	DECLARE raiseException EXTERNAL BOOLEAN FALSE;
	DECLARE serviceName EXTERNAL CHARACTER 'ErrorHandling';
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE envRef REFERENCE TO Environment.Variables;
		SET OutputLocalEnvironment 		  = InputLocalEnvironment;
		SET envRef.serviceName    		  = COALESCE(InputRoot.XMLNSC.*:eAI_MESSAGE.*:eAI_HEADER.*:serviceName,serviceName);
		SET envRef.Email.RaiseException	  = raiseException;
		SET envRef.Email.Variables.p1	  = '<h4>' ||  CAST(envRef.referenceNum AS CHARACTER)|| '</h4><br/>';
		SET envRef.Email.send			  = LOWER(CAST (sendEmail AS CHARACTER));

		DECLARE exList CHARACTER ;
		
		 CALL getLastExceptionDetail(InputExceptionList,exList);
		 
		 IF envRef.Email.Variables.p1 is not NULL THEN
		 	SET envRef.Email.Variables.p1 = envRef.Email.Variables.p1 || exList;
		 ELSE
		 	SET envRef.Email.Variables.p1 = exList;		 
		 END IF;
		 
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
	
CREATE PROCEDURE getLastExceptionDetail(IN InputTree reference,OUT excpMessage char)	
    /****************************************************************************
	 * A procedure that will get the details of the last exception from a message
	 * IN InputTree:  The incoming exception list
	 * IN messageNumber:  The last message numberr.
	 * IN messageText: The last message text.
	 *****************************************************************************/
   BEGIN
   	    -- Create a reference to the first child of the exception list
   	    declare ptrException reference to InputTree.*[1];
   	    -- keep looping while the moves to the child of exception list work 
		SET excpMessage = '';
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		DECLARE X INTEGER ;
		SET J = CARDINALITY(ptrException.*[]);
		WHILE I <= J DO
			SET X =  CARDINALITY(ptrException.*[I].*[]);
			IF X > 0 THEN
				SET excpMessage = excpMessage || '<b>' || FIELDNAME(ptrException.*[I]) || '</b><br />';
				SET excpMessage = excpMessage || getInnerException(ptrException.*[I]);				
			ELSE
				SET excpMessage = excpMessage ||  FIELDNAME(ptrException.*[I]) || ':' || CAST (FIELDVALUE(ptrException.*[I]) AS CHARACTER )|| '<br />';				
			
			END IF;	
			SET I = I + 1;
		END WHILE;
	
	END;	
	
CREATE FUNCTION getInnerException(IN ptrException reference) RETURNS CHARACTER	 
   
   BEGIN
   	   DECLARE excpMessage CHARACTER '';
   	   DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		DECLARE X INTEGER ;
		SET J = CARDINALITY(ptrException.*[]);
		WHILE I <= J DO
			SET X =  CARDINALITY(ptrException.*[I].*[]);
			IF X > 0 THEN
				SET excpMessage = excpMessage || '&nbsp;&nbsp;<b>' || FIELDNAME(ptrException.*[I]) || '</b><br />';
				SET excpMessage = excpMessage || getInnerException(ptrException.*[I]);			
			ELSE
				SET excpMessage = excpMessage || '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;' || FIELDNAME(ptrException.*[I]) || ':' || CAST (FIELDVALUE(ptrException.*[I]) AS CHARACTER ) || '<br />';				
			
			END IF;	
			SET I = I + 1;
		END WHILE;
		RETURN excpMessage;
	END;		
END MODULE;