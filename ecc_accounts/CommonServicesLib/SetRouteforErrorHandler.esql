BROKER SCHEMA CommonServicesLib


CREATE COMPUTE MODULE SetRouteforErrorHandler
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		
		CALL CopyEntireMessage();
		DECLARE envRef REFERENCE TO Environment.Variables;
				
		DECLARE start REFERENCE TO InputExceptionList.*[1].ParserException[1];
		DECLARE test CHARACTER FIELDNAME(start); 
		SET OutputExceptionList 			= InputExceptionList;
		SET envRef.MQRFH2	= InputRoot.MQRFH2;
		SET envRef.MQMD		= InputRoot.MQMD;
		
		SET envRef.referenceNum  	
											= COALESCE(InputRoot.XMLNSC.*:eAI_MESSAGE.*:eAI_BODY.*:eAI_REQUEST.*[1].*:referenceNum, Environment.XMLNSC.*:eAI_MESSAGE.*:eAI_BODY.*:eAI_REQUEST.*:*.*:referenceNum);
		SET envRef.requestTime  		
											= COALESCE(InputRoot.XMLNSC.*:eAI_MESSAGE.*:eAI_BODY.*:eAI_REQUEST.*[1].*:requestTime,Environment.XMLNSC.*:eAI_MESSAGE.*:eAI_BODY.*:eAI_REQUEST.*:*.*:requestTime);
		
		IF FIELDNAME(start) = 'ParserException' THEN
			SET envRef.referenceNum  	= InputRoot.XMLNSC.*:eAI_MESSAGE.*:eAI_BODY.*:eAI_REQUEST.*[1].*:referenceNum;			
			-- setting return codes
			SET envRef.returnCode 		= '1104';
			SET envRef.returnCodeDesc	= 'Error while parsing message';
		 END IF;
		
		PROPAGATE TO TERMINAL 'out1';
		PROPAGATE TO TERMINAL 'out';
		RETURN FALSE;		 		 				
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
